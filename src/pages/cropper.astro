---
import Base from "../components/base.astro";
---

<Base>
	<main class="w-full h-full overflow-hidden cursor-crosshair relative">
		<section class="hidden absolute before:top-[100%] after:bottom-[100%]">
			<div id="selectionBorder"></div>
			<div id="selectionInner" class="w-full h-full absolute"></div>
		</section>
	</main>
</Base>

<style>
	section::before,
	section::after,
	#selectionInner::before,
	#selectionInner::after {
		content: "";
		position: absolute;
		width: 100%;
		height: 100vh;
		background: rgba(0, 0, 0, 0.5);
	}

	#selectionInner::before,
	#selectionInner::after {
		width: 100vw;
		height: 200vh;
		top: -100vh;
		bottom: 0;
	}

	#selectionInner::before {
		left: 100%;
	}

	#selectionInner::after {
		right: 100%;
	}

	#selectionBorder {
		height: 100%;
		width: 100%;
		border: 1px dashed white;
		display: block;
	}
	.hidden {
		transform: scale(0);
	}

	.recording {
		pointer-events: none;
	}
</style>

<script>
	import { invoke } from "@tauri-apps/api/core";
	import { listen } from "@tauri-apps/api/event";

	let startX = 0;
	let startY = 0;
	let endX = 0;
	let endY = 0;
	let isSelecting = false;

	// Constants
	const selectionEl = document.querySelector("section");
	const selectableAreaEl = document.querySelector("main");

	// Check if elements are found
	if (!selectionEl || !selectableAreaEl) {
		console.error("Unable to find necessary elements.");
	}

	listen("reset-area", resetSelection);

	selectableAreaEl!.addEventListener("mousedown", (e) => {
		isSelecting = true;
		selectionEl!.classList.remove("hidden");
		startX = e.clientX - selectableAreaEl!.offsetLeft;
		startY = e.clientY - selectableAreaEl!.offsetTop;
	});

	selectableAreaEl!.addEventListener("mousemove", (e) => {
		if (isSelecting) updateSelection(e);
	});

	selectableAreaEl!.addEventListener("mouseup", () => {
		if (isSelecting) {
			// Since our recorder expects coordinates in the
			// [topX, topY, bottomX, bottomY] format, we interchange
			// start and end values if required
			if (startX > endX) {
				const temp = startX;
				startX = endX;
				endX = temp;
			}

			if (startY > endY) {
				const temp = startY;
				startY = endY;
				endY = temp;
			}

			isSelecting = false;
			invoke("update_crop_area", {
				area: [startX, startY, endX, endY],
			});
		}
	});

	function updateSelection(e: any) {
		endX = e.clientX - selectableAreaEl!.offsetLeft;
		endY = e.clientY - selectableAreaEl!.offsetTop;
		const width = endX - startX;
		const height = endY - startY;
		selectionEl!.style.width = `${Math.abs(width)}px`;
		selectionEl!.style.height = `${Math.abs(height)}px`;
		selectionEl!.style.left = `${width > 0 ? startX : endX}px`;
		selectionEl!.style.top = `${height > 0 ? startY : endY}px`;
	}

	function resetSelection() {
		selectionEl!.style.width = "0px";
		selectionEl!.style.height = "0px";
		selectionEl!.style.left = "0px";
		selectionEl!.style.top = "0px";
		window.location.reload();
	}

	document.addEventListener("keydown", (e) => {
		if (e.key === "Escape" || e.key === "Esc") {
			e.preventDefault();
			invoke("hide_cropper");
		}
	});
</script>
