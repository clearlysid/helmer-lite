---
import Base from "../components/base.astro";
---

<Base>
	<main>
		<canvas id="canvas_frames" width="600" height="600"></canvas>

		<form id="form" class="panel">
			<div>
				<label for="size">Size</label>
				<select name="size" id="size">
					<option value="200">200</option>
					<option value="400">400</option>
					<option value="800">800</option>
					<option value="1000" selected>1000</option>
					<option value="2000">2000</option>
				</select>
			</div>
			<div>
				<label for="fps">Smoothness</label>
				<input id="fps" type="number" min="15" max="60" value="30">
			</div>
			<div>
				<label for="speed">Speed</label>
				<input id="speed" type="range" min="0.5" max="2" value="1" step="0.1">
			</div>
			<div>
				<label for="loop">Loop</label>
				<input id="loop" type="checkbox">
			</div>
			<div>
				<label for="bounce">Bounce</label>
				<input id="bounce" type="checkbox" checked>
			</div>
			<input id="export" type="submit" value="Export">
		</form>
	</main>
</Base>

<style>
	* {
		box-sizing: border-box;
	}

	main {
		display: flex;
		flex-direction: column;
		align-items: center;
		width: 100%;
		height: 100%;
		background: black;
		padding: 2rem;
		gap: 16px;
	}
	canvas {
		background: rgba(255,255,255, 0.1);
		border-radius: 20px;
	}

	.panel {
		display: flex;
		align-items: center;
		background: rgba(255,255,255, 0.1);
		padding: 1.4rem 2rem;
		gap: 2rem;
		border-radius: 8px;
	}

	.panel div {
		display: flex;
		flex-direction: column;
		gap: 8px;
	}

	label {
		font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Open Sans', 'Helvetica Neue', sans-serif;
		color: rgba(255,255,255, 0.5);
		font-weight: 500;
		text-transform: uppercase;
		font-size: 12px;
		letter-spacing: 0.1px;
	}

	#export {
		background: blueviolet;
		padding: 1rem 2rem;
		border: none;
		color: white;
		font-size: 18px;
		border-radius: 12px;
		transition: all 0.2s ease;
		cursor: pointer;
	}

	#export:hover {
		background: rgb(108, 36, 174);
		transform: translateY(-2px);
	}

	#gif_preview {
		width: 100%;
		max-width: 1000px;
		border-radius: 8px;
	}
</style>

<script>
	import { invoke } from '@tauri-apps/api/tauri'
	import { listen } from '@tauri-apps/api/event'


	const unlisten = await listen('captured_frames', (frames:any) => {
		console.log("frames:",frames)
		alert("frames captured")
		// const canvas = document.getElementById('canvas_frames') as HTMLCanvasElement;
		// const ctx = canvas.getContext('2d');

		// // Replace the following line with the actual rgbaData array for each frame
		// const framesData = Array.from({ length: 10 }, (_, index) => getFrameData(index));

		// let currentFrame = 0;

		// function renderFrame() {
		// 	(ctx as CanvasRenderingContext2D).clearRect(0, 0, canvas.width, canvas.height);

		// 	const imageData = (ctx as CanvasRenderingContext2D).createImageData(canvas.width, canvas.height);
		// 	const rgbaData = framesData[currentFrame];

		// 	for (let i = 0; i < rgbaData.length; i++) {
		// 		imageData.data[i] = rgbaData[i];
		// 	}

		// 	(ctx as CanvasRenderingContext2D).putImageData(imageData, 0, 0);

		// 	// Increment current frame and loop back to the beginning
		// 	currentFrame = (currentFrame + 1) % framesData.length;

		// 	requestAnimationFrame(renderFrame);
		// }

		// function getFrameData(frameIndex: number) {
		// 	const rgbaData = frames[frameIndex].data;
		// 	return rgbaData;
		// }
		// renderFrame();
	})
	
	document.addEventListener('DOMContentLoaded', () => {
		console.log("Calling unlisten")
		unlisten();
		console.log("Called unlisten")
	})


	const form = document.getElementById('form') as HTMLFormElement;
	const size = document.getElementById('size') as HTMLSelectElement;
	const fps = document.getElementById('fps') as HTMLInputElement;
	const speed = document.getElementById('speed') as HTMLInputElement;
	const loop = document.getElementById('loop') as HTMLInputElement;
	const bounce = document.getElementById('bounce') as HTMLInputElement;

	form.addEventListener("submit", (event) => {
    event.preventDefault();

		const options = {
			size: size.value,
			fps: fps.value,
			speed: Number.parseFloat(speed.value),
			loop_gif: loop.checked,
			bounce: bounce.checked
		}

		// send data to server
		invoke('export_handler', {
				options
			}).then(() => {
				console.log("export started")
			})


	});

</script>